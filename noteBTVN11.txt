@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
là cách bạn định nghĩa khóa chính (primary key) tự động tăng cho entity trong Spring Boot sử dụng JPA.
| Annotation                           | Ý nghĩa                                                    |
| ------------------------------------ | ---------------------------------------------------------- |
| `@Id`                                | Đánh dấu trường `id` là **khóa chính** của bảng            |
| `@GeneratedValue(...)`               | Quy định cách **tự sinh giá trị cho khóa chính**           |
| `strategy = GenerationType.IDENTITY` | Sử dụng **auto-increment** của CSDL (MySQL, PostgreSQL...) |



Ý nghĩa của @Column(name = "class_id")
Annotation @Column(...) là của JPA dùng để map một thuộc tính Java với một cột trong bảng CSDL.

@Column(name = "class_id")
private Long classId;
Nghĩa là: thuộc tính classId trong class Java tương ứng với cột class_id trong bảng SQL.

❗ Nó chỉ định tên cột, không chỉ định mối quan hệ giữa bảng.

DTO là viết tắt của Data Transfer Object, được sử dụng trong lập trình để chuyển dữ liệu giữa các thành phần khác nhau của một ứng dụng. 
Thông thường, một DTO là một đối tượng đơn giản, không có logic xử lý phức tạp, chỉ chứa các thuộc tính và phương thức getter và setter để truy cập và cập nhật các thuộc tính đó.
| Lý do dùng DTO                            | Giải thích ngắn gọn                        |
| ----------------------------------------- | ------------------------------------------ |
| 1. Tránh gửi toàn bộ entity               | Chỉ gửi trường cần thiết                   |
| 2. Gom dữ liệu từ nhiều bảng              | Trả về object phức hợp (student + class)   |
| 3. Dễ mở rộng, tách biệt tầng logic       | Dễ bảo trì và refactor                     |
| 4. Bảo mật, tránh expose dữ liệu nhạy cảm | Không trả về các field như password, token |
| 5. Xác thực và validate dễ hơn            | DTO có thể tích hợp validation             |

Annotation @Autowired trong Spring Boot có ý nghĩa là: tự động tiêm (inject) một bean đã được quản lý bởi Spring vào trong class hiện tại.
@Autowired
private StudentService studentService;
👉 Giải nghĩa:
Spring sẽ tự động tìm một bean của StudentService đã được đánh dấu là @Service, và gán vào biến studentService.

Nhờ vậy, bạn không cần tự tạo đối tượng bằng new, mà vẫn dùng được các hàm như:

studentService.addStudent(...);
studentService.getStudentWithClassById(...);


Trong Spring Framework, ResponseEntity là một lớp Java dùng để biểu diễn một phản hồi HTTP đầy đủ, bao gồm cả mã trạng thái, tiêu đề và nội dung của phản hồi. 

public ResponseEntity<?> là một kiểu trả về rất phổ biến trong các controller của Spring Boot, dùng để trả về HTTP response đến client 
(như trình duyệt, Postman, frontend React/Angular...).
ResponseEntity<?>
ResponseEntity là một class của Spring đại diện cho một phản hồi HTTP bao gồm:

Body (nội dung trả về) – ví dụ: JSON, chuỗi, object,...

Status code – ví dụ: 200 OK, 400 Bad Request, 404 Not Found,...

Headers – (nếu cần), ví dụ: Content-Type, Authorization,...

<?> là kiểu dữ liệu trả về (generics).

<?> nghĩa là trả về bất kỳ kiểu gì, có thể là:

String

Object

List<Student>

DTO, v.v.

👉 Đây là cách linh hoạt nhất để trả dữ liệu cho client.

🔹 Trả về thành công (200 OK)
return ResponseEntity.ok("Thêm học sinh thành công!");
→ Trả về body là chuỗi "Thêm học sinh thành công!" và HTTP status 200 OK.

🔹 Trả về object
return ResponseEntity.ok(student);
→ Trả về object student (Spring sẽ tự convert sang JSON), status 200 OK.

🔹 Trả về lỗi (400 Bad Request)
return ResponseEntity.badRequest().body("Tên học sinh không được để trống");
→ Trả về body là chuỗi lỗi + status 400.


 @RequestBody là gì?
Dùng để lấy dữ liệu từ phần body của request HTTP (thường là JSON).
Spring sẽ tự động ánh xạ (map) body thành 1 object Java.

@RequestParam là gì?
Dùng để lấy dữ liệu từ query string hoặc form-data (trên URL hoặc biểu mẫu).
Giá trị là kiểu đơn giản: String, int, long, v.v.

| Tiêu chí           | `@RequestBody`                   | `@RequestParam`                       |
| ------------------ | -------------------------------- | ------------------------------------- |
| Lấy dữ liệu từ     | Body (JSON, XML...)              | Query string (`?id=1`) hoặc form data |
| Kiểu dữ liệu       | Object phức tạp (DTO, Entity...) | Kiểu đơn giản (int, String, long...)  |
| Thường dùng với    | `POST`, `PUT`                    | `GET`, `DELETE`, `POST`               |
| Cần `Content-Type` | `application/json`               | Không cần                             |
| Ví dụ              | `@RequestBody Student s`         | `@RequestParam long id`               |

| Tiêu chí                         | `@PathVariable` | `@RequestParam`                   |
| -------------------------------- | --------------- | --------------------------------- |
| Dạng URL                         | `/classes/1`    | `/classes?id=1`                   |
| Gọn gàng, RESTful hơn            | ✅               | ❌ (ít dùng trong REST API delete) |
| Thường dùng với DELETE, PUT, GET | ✅               | ❌ (ít phổ biến với DELETE)        |
| Truyền tham số qua dấu `?`       | ❌               | ✅                                 |


@PostMapping
public ResponseEntity<?> createStudent(@RequestBody Student student, @RequestParam long classId ) {
    try {
        Student save = studentService.createStudent(student, classId);
        return ResponseEntity.ok(save);
    } catch (RuntimeException e) {
        return ResponseEntity.badRequest().body(e.getMessage());
    }
}

@PostMapping
Đây là annotation để xử lý các HTTP request kiểu POST.

Mặc định, đường dẫn của API này là /students (nếu được khai báo trong controller là @RequestMapping("/students")).

👉 Nghĩa là: Client sẽ gọi POST /students để thêm mới học sinh.

public ResponseEntity<?> createStudent(@RequestBody Student student, @RequestParam long classId )
🎯 @RequestBody Student student
Dữ liệu JSON từ body sẽ được convert tự động sang object Student.

Ví dụ body gửi lên:
{
  "id": 10,
  "name": "Nguyễn Văn A",
  "age": 20,
  "gender": "Nam"
}


@RequestParam long classId
Lấy tham số classId từ query string, ví dụ:

POST /students?classId=2

Student save = studentService.createStudent(student, classId);
Gọi hàm createStudent(...) trong StudentService để xử lý logic:

Kiểm tra lớp có tồn tại không

Kiểm tra tên học sinh hợp lệ

Gán classId cho học sinh

Lưu học sinh vào CSDL

return ResponseEntity.ok(save);
Nếu mọi thứ thành công:

Trả về mã 200 OK

} catch (RuntimeException e) {
    return ResponseEntity.badRequest().body(e.getMessage());
}
Nếu trong quá trình xử lý có lỗi (ví dụ lớp không tồn tại, tên học sinh trống,...), thì:

Trả về mã 400 Bad Request

Nội dung là chuỗi thông báo lỗi

Kết luận luồng hoạt động
Client (Postman, frontend)
  ↓
Gửi POST /students?classId=2
  ↓
Truyền JSON → tạo object Student
  ↓
Gọi studentService.createStudent(...)
  ↓
Lưu xuống DB
  ↓
Trả về JSON + mã 200 nếu thành công
Trả về lỗi 400 nếu có RuntimeException

List<Student> students = studentRepository.findAll();
- Gọi tới `studentRepository` để lấy **toàn bộ danh sách học sinh từ CSDL** (bảng `student`).
- Kết quả là danh sách `List<Student>`.


List<StudentWithClassDTO> result = new ArrayList<>();
Tạo một danh sách để chứa kết quả DTO (StudentWithClassDTO) – dữ liệu chuẩn bị trả về client (Postman, frontend, v.v.).
DTO giúp gom dữ liệu học sinh + lớp học lại thành 1 object.

for (Student student : students) {
...
}
- Duyệt qua từng học sinh trong danh sách vừa lấy được.

StudentWithClassDTO dto = new StudentWithClassDTO();
dto.setId(student.getId());
dto.setName(student.getName());
dto.setAge(student.getAge());
dto.setGender(student.getGender());

Khởi tạo object DTO.

Gán các thông tin cơ bản của học sinh vào DTO.

if (student.getClassId() != null) {
Classes classes = classRepository.findById(student.getClassId()).orElse(null);
- Kiểm tra nếu học sinh này có `classId` (**không bị null**).
- Nếu có, tìm lớp học tương ứng trong bảng `classes` dựa vào `classId`.
- Nếu không có lớp tương ứng (trường hợp dữ liệu bị sai), thì `classes == null`.

---
if (classes != null) {
    StudentWithClassDTO.ClassDTO classDTO = new StudentWithClassDTO.ClassDTO();
    classDTO.setId(classes.getId());
    classDTO.setName(classes.getName());
    classDTO.setTeacherName(classes.getTeacherName());
    classDTO.setAddress(classes.getAddress());
    dto.setClassInfo(classDTO);
}
Nếu tìm được lớp học:

Tạo đối tượng ClassDTO (là lớp con nằm trong StudentWithClassDTO).

Gán các thông tin lớp học: id, tên lớp, giáo viên, địa chỉ...

Gán classDTO vào bên trong dto.


result.add(dto);

- Sau khi đã gán xong thông tin học sinh + lớp học (nếu có), thêm `dto` vào danh sách kết quả.

--- return result;
Trả về danh sách các học sinh, mỗi học sinh là một object DTO (có thể có thêm thông tin lớp học nếu có).
















